#!/usr/bin/env python3

"""
    Source:
    https://stanford.edu/~cpiech/cs221/handouts/kmeans.html

    K-means is an Expectation-Maximization (EM) algorithm.

    Clusters: groups of data which are similar to one another
    Cluster centroids: the geometrical mean of a cluster

    Algorithm:

    1. Get k number of random samples from the dataset, called
       centroids.
    2. Repeat until max_iter reached OR convergence:
        2.1 (E) Assign points to the nearest centroid.
        2.2 (M) Set the cluster centers to the mean of the points
            assigned to the specific cluster.

    As the number of iterations progresses, the cluster centroids
    become better and better.
"""

# from sklearn.datasets import load_breast_cancer as lbc
from sklearn.datasets.samples_generator import make_blobs
from sklearn.datasets import load_breast_cancer
from sklearn.cluster import KMeans
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

sns.set()  # for styling plots

'''
Returns a random sample of the array arr with a size of k.
'''


def init_centroids(arr, k, rng=np.random.RandomState(2020)):
    _centroids = arr.copy()
    np.random.shuffle(_centroids)
    return _centroids[:k]


def adjust_centroids(X, centroids, k):
    # the same as pairwise_distances_argmin in sklearn :)
    labels = np.argmin(
        np.sum(
            np.abs(
                X[:, None, :] - centroids[None, :, :]
            ),
            axis=-1
        ),
        axis=-1
    )

    # Recalculate each centroid
    new_centroids = np.array(
        [X[labels == i].mean(0) for i in range(k)]
    )

    return new_centroids, labels


def kmeans(X, k, seed=2020, max_iter=10000):
    rng = np.random.RandomState(seed)

    centroids = init_centroids(X, k, rng)
    labels = None

    i = 0
    while True:
        i = i + 1

        old_centroids = centroids

        centroids, labels = adjust_centroids(X, centroids, k)

        if i == max_iter:
            print("Max iteration value reached")
            break

        if np.all(centroids == old_centroids):
            break

    return centroids, labels


# data = lbc()
X, y_original = make_blobs(n_samples=300, centers=4, cluster_std=0.60,
                           random_state=2020)

plt.figure(1)
plt.title(
    "The original, unclustered data (generated by sklearn.datasets.make_blobs)")
plt.scatter(X[:, 0], X[:, 1])
plt.show()

plt.figure(2)
plt.title("The clusters and their centres generated by me")
centroids, labels = kmeans(X, 4)
plt.scatter(X[:, 0], X[:, 1], c=labels)
plt.scatter(centroids[:, 0], centroids[:, 1], c='#ff0000', marker='*')
plt.show()

plt.figure(3)
plt.title(
    "The clusters and their centres generated by the scikit-learn algorithm")

km = KMeans(n_clusters=4, random_state=2020).fit(X)
plt.scatter(X[:, 0], X[:, 1], c=km.labels_)
plt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],
            c='#ff0000', marker='*')
plt.show()

breast_c = load_breast_cancer()
X_breast_cancer = breast_c.data
y_breast_cancer_true = breast_c.target

plt.figure(4)
plt.title("The original, unclustered data (run on sklearn's breast_cancer)")
plt.scatter(X_breast_cancer[:, 0], X_breast_cancer[:, 1])
plt.show()

errors = []

for i in range(2, 11):
    plt.figure(5 + i)
    plt.title(f"The clusters and their centres (k={i})")
    centroids, labels = kmeans(X_breast_cancer, i)
    SSE = np.sum((y_breast_cancer_true - labels) ** 2)
    errors.append(SSE)
    plt.scatter(X_breast_cancer[:, 0], X_breast_cancer[:, 1], c=labels)
    plt.scatter(centroids[:, 0], centroids[:, 1], c='#ff0000', marker='*')
    plt.show()

plt.figure(20)
plt.title("Sum of squared errors with different k values")
plt.plot(errors)
plt.xlabel("k=")
plt.ylabel("Sum of squared errors")
plt.show()
